{"ast":null,"code":"import Web3 from 'web3';\nexport const sendTransaction = async (provider, fromAddress, toAddress, encodedABI, wei = `0x0`, onError) => {\n  const web3 = new Web3(provider);\n\n  if (window.ethereum && web3) {\n    try {\n      const gasPrice = await web3.eth.getGasPrice();\n      const tx = {\n        from: fromAddress,\n        to: toAddress,\n        gasPrice: web3.utils.toHex(gasPrice),\n        //`0xAB5D04C00`,\n        data: encodedABI,\n        value: wei\n      };\n      return new Promise((resolve, reject) => {\n        web3.eth.sendTransaction(tx).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          resolve(receipt);\n        }).on('error', err => {\n          reject(err);\n          if (onError) onError(err);\n        });\n      });\n    } catch (err) {\n      console.log('err :>> ', err);\n      return null;\n    }\n  } else {\n    return null;\n  }\n};","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/utils/utils.ts"],"names":["Web3","sendTransaction","provider","fromAddress","toAddress","encodedABI","wei","onError","web3","window","ethereum","gasPrice","eth","getGasPrice","tx","from","to","utils","toHex","data","value","Promise","resolve","reject","on","hash","receipt","err","console","log"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AAEA,OAAO,MAAMC,eAAe,GAAG,OAAOC,QAAP,EAAsBC,WAAtB,EAAwCC,SAAxC,EAAwDC,UAAxD,EAAyEC,GAAG,GAAI,KAAhF,EAAsFC,OAAtF,KAA6G;AACxI,QAAMC,IAAI,GAAG,IAAIR,IAAJ,CAASE,QAAT,CAAb;;AACA,MAAIO,MAAM,CAACC,QAAP,IAAmBF,IAAvB,EAA6B;AACzB,QAAI;AAEA,YAAMG,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAL,CAASC,WAAT,EAAvB;AACA,YAAMC,EAAE,GAAG;AACPC,QAAAA,IAAI,EAAEZ,WADC;AAEPa,QAAAA,EAAE,EAAEZ,SAFG;AAGPO,QAAAA,QAAQ,EAAEH,IAAI,CAACS,KAAL,CAAWC,KAAX,CAAiBP,QAAjB,CAHH;AAG8B;AACrCQ,QAAAA,IAAI,EAAEd,UAJC;AAKPe,QAAAA,KAAK,EAAEd;AALA,OAAX;AAOA,aAAO,IAAIe,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCf,QAAAA,IAAI,CAACI,GAAL,CAASX,eAAT,CAAyBa,EAAzB,EACKU,EADL,CACQ,iBADR,EAC4BC,IAAD,IAAU;AAC7BH,UAAAA,OAAO,CAACG,IAAD,CAAP;AACH,SAHL,EAIKD,EAJL,CAIQ,SAJR,EAIoBE,OAAD,IAAa;AACxBJ,UAAAA,OAAO,CAACI,OAAD,CAAP;AACH,SANL,EAOKF,EAPL,CAOQ,OAPR,EAOkBG,GAAD,IAAS;AAClBJ,UAAAA,MAAM,CAACI,GAAD,CAAN;AACA,cAAGpB,OAAH,EAAYA,OAAO,CAACoB,GAAD,CAAP;AACf,SAVL;AAWH,OAZM,CAAP;AAaH,KAvBD,CAuBE,OAAOA,GAAP,EAAY;AACVC,MAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBF,GAAxB;AACA,aAAO,IAAP;AACH;AACJ,GA5BD,MA4BO;AACH,WAAO,IAAP;AACH;AACJ,CAjCM","sourcesContent":["import Web3 from 'web3'\r\n\r\nexport const sendTransaction = async (provider: any, fromAddress: any, toAddress: any, encodedABI: any, wei = `0x0`, onError?: Function) => {\r\n    const web3 = new Web3(provider)\r\n    if (window.ethereum && web3) {\r\n        try {\r\n\r\n            const gasPrice = await web3.eth.getGasPrice();\r\n            const tx = {\r\n                from: fromAddress,\r\n                to: toAddress,\r\n                gasPrice: web3.utils.toHex(gasPrice),//`0xAB5D04C00`,\r\n                data: encodedABI,\r\n                value: wei\r\n            };\r\n            return new Promise((resolve, reject) => {\r\n                web3.eth.sendTransaction(tx)\r\n                    .on('transactionHash', (hash) => {\r\n                        resolve(hash)\r\n                    })\r\n                    .on('receipt', (receipt) => {\r\n                        resolve(receipt);\r\n                    })\r\n                    .on('error', (err) => {\r\n                        reject(err);\r\n                        if(onError) onError(err)\r\n                    });\r\n            });\r\n        } catch (err) {\r\n            console.log('err :>> ', err);\r\n            return null;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}