{"ast":null,"code":"import Web3 from 'web3';\nexport const sendTransaction = async (provider, fromAddress, toAddress, encodedABI, wei = `0x0`, onError, onSuccess) => {\n  const web3 = new Web3(provider);\n\n  if (window.ethereum && web3) {\n    try {\n      const gasPrice = await web3.eth.getGasPrice();\n      const tx = {\n        from: fromAddress,\n        to: toAddress,\n        gasPrice: web3.utils.toHex(gasPrice),\n        //`0xAB5D04C00`,\n        data: encodedABI,\n        value: wei\n      };\n      return new Promise((resolve, reject) => {\n        web3.eth.sendTransaction(tx).on('transactionHash', hash => {\n          resolve(hash);\n        }).on('receipt', receipt => {\n          resolve(receipt);\n          if (onSuccess) onSuccess();\n        }).on('error', err => {\n          reject(err);\n          if (onError) onError(err);\n        });\n      });\n    } catch (err) {\n      console.log('err :>> ', err);\n      return null;\n    }\n  } else {\n    return null;\n  }\n};\nexport const multipleTx = async (times, provider, fromAddress, toAddress, encodedABI, wei = `0x0`, onError, onSuccess) => {\n  const web3 = new Web3(provider);\n\n  if (window.ethereum && web3) {\n    for (let i = 0; i < times; i++) {\n      try {\n        const gasPrice = await web3.eth.getGasPrice();\n        const tx = {\n          from: fromAddress,\n          to: toAddress,\n          gasPrice: web3.utils.toHex(gasPrice),\n          //`0xAB5D04C00`,\n          data: encodedABI,\n          value: wei\n        };\n        return new Promise((resolve, reject) => {\n          web3.eth.sendTransaction(tx).on('transactionHash', hash => {\n            resolve(hash);\n          }).on('receipt', receipt => {\n            resolve(receipt);\n            if (onSuccess) onSuccess();\n          }).on('error', err => {\n            reject(err);\n            if (onError) onError(err);\n          });\n        });\n      } catch (err) {\n        console.log('err :>> ', err);\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/utils/utils.ts"],"names":["Web3","sendTransaction","provider","fromAddress","toAddress","encodedABI","wei","onError","onSuccess","web3","window","ethereum","gasPrice","eth","getGasPrice","tx","from","to","utils","toHex","data","value","Promise","resolve","reject","on","hash","receipt","err","console","log","multipleTx","times","i"],"mappings":"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","sourcesContent":["import Web3 from 'web3'\r\n\r\nexport const sendTransaction = async (provider: any, fromAddress: any, toAddress: any, encodedABI: any, wei = `0x0`, onError?: Function, onSuccess?: Function) => {\r\n    const web3 = new Web3(provider)\r\n    if (window.ethereum && web3) {\r\n        try {\r\n            const gasPrice = await web3.eth.getGasPrice();\r\n            const tx = {\r\n                from: fromAddress,\r\n                to: toAddress,\r\n                gasPrice: web3.utils.toHex(gasPrice),//`0xAB5D04C00`,\r\n                data: encodedABI,\r\n                value: wei\r\n            };\r\n            return new Promise((resolve, reject) => {\r\n                web3.eth.sendTransaction(tx)\r\n                    .on('transactionHash', (hash) => {\r\n                        resolve(hash)\r\n                    })\r\n                    .on('receipt', (receipt) => {\r\n                        resolve(receipt);\r\n                        if(onSuccess) onSuccess()\r\n                    })\r\n                    .on('error', (err) => {\r\n                        reject(err);\r\n                        if(onError) onError(err)\r\n                    });\r\n            });\r\n        } catch (err) {\r\n            console.log('err :>> ', err);\r\n            return null;\r\n        }\r\n    } else {\r\n        return null;\r\n    }\r\n}\r\n\r\nexport const multipleTx = async (times: number, provider: any, fromAddress: any, toAddress: any, encodedABI: any, wei = `0x0`, onError?: Function, onSuccess?: Function) => {\r\n    const web3 = new Web3(provider)\r\n    if (window.ethereum && web3) {\r\n        for (let i = 0; i < times; i++) {\r\n            try {\r\n                const gasPrice = await web3.eth.getGasPrice();\r\n                const tx = {\r\n                    from: fromAddress,\r\n                    to: toAddress,\r\n                    gasPrice: web3.utils.toHex(gasPrice),//`0xAB5D04C00`,\r\n                    data: encodedABI,\r\n                    value: wei\r\n                };\r\n                return new Promise((resolve, reject) => {\r\n                    web3.eth.sendTransaction(tx)\r\n                        .on('transactionHash', (hash) => {\r\n                            resolve(hash)\r\n                        })\r\n                        .on('receipt', (receipt) => {\r\n                            resolve(receipt);\r\n                            if(onSuccess) onSuccess()\r\n                        })\r\n                        .on('error', (err) => {\r\n                            reject(err);\r\n                            if(onError) onError(err)\r\n                        });\r\n                });\r\n            } catch (err) {\r\n                console.log('err :>> ', err);\r\n                return null;\r\n            }\r\n        }\r\n    }\r\n  }"]},"metadata":{},"sourceType":"module"}