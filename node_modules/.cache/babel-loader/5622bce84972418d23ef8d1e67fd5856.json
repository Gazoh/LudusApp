{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useWallet } from 'use-wallet';\nimport { getMasterChefContract, getWethContract, getVbtcContract, getFarms, getTotalLPWethValue } from '../vbtc/utils';\nimport useVBTC from './useVBTC';\nimport useBlock from './useBlock';\n\nconst useAllStakedValue = () => {\n  const [balances, setBalance] = useState([]);\n  const {\n    account\n  } = useWallet();\n  const vbtc = useVBTC();\n  const farms = getFarms(vbtc);\n  const masterChefContract = getMasterChefContract(vbtc);\n  const wethContact = getWethContract(vbtc);\n  const vbtcContract = getVbtcContract(vbtc);\n  const block = useBlock();\n  const fetchAllStakedValue = useCallback(async () => {\n    const balances = await Promise.all(farms.map(({\n      isBalancer,\n      pid,\n      lpContract,\n      tokenContract,\n      balancerPoolContract,\n      multiplier\n    }) => getTotalLPWethValue(isBalancer, masterChefContract, wethContact, lpContract, tokenContract, pid, vbtcContract, balancerPoolContract, vbtc, block)));\n    setBalance(balances);\n  }, [account, masterChefContract, vbtc]);\n  useEffect(() => {\n    if (account && masterChefContract && vbtc) {\n      fetchAllStakedValue();\n    }\n  }, [account, block, masterChefContract, setBalance, vbtc]);\n  return balances;\n};\n\nexport default useAllStakedValue;","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/hooks/useAllStakedValue.ts"],"names":["useCallback","useEffect","useState","useWallet","getMasterChefContract","getWethContract","getVbtcContract","getFarms","getTotalLPWethValue","useVBTC","useBlock","useAllStakedValue","balances","setBalance","account","vbtc","farms","masterChefContract","wethContact","vbtcContract","block","fetchAllStakedValue","Promise","all","map","isBalancer","pid","lpContract","tokenContract","balancerPoolContract","multiplier"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,QAAjC,QAAiD,OAAjD;AAIA,SAASC,SAAT,QAA0B,YAA1B;AAGA,SACEC,qBADF,EAEEC,eAFF,EAGEC,eAHF,EAIEC,QAJF,EAKEC,mBALF,QAMO,eANP;AAOA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAWA,MAAMC,iBAAiB,GAAG,MAAM;AAC9B,QAAM,CAACC,QAAD,EAAWC,UAAX,IAAyBX,QAAQ,CAAC,EAAD,CAAvC;AACA,QAAM;AAAEY,IAAAA;AAAF,MAAuDX,SAAS,EAAtE;AACA,QAAMY,IAAI,GAAGN,OAAO,EAApB;AACA,QAAMO,KAAK,GAAGT,QAAQ,CAACQ,IAAD,CAAtB;AACA,QAAME,kBAAkB,GAAGb,qBAAqB,CAACW,IAAD,CAAhD;AACA,QAAMG,WAAW,GAAGb,eAAe,CAACU,IAAD,CAAnC;AACA,QAAMI,YAAY,GAAGb,eAAe,CAACS,IAAD,CAApC;AACA,QAAMK,KAAK,GAAGV,QAAQ,EAAtB;AAEA,QAAMW,mBAAmB,GAAGrB,WAAW,CAAC,YAAY;AAClD,UAAMY,QAA4B,GAAG,MAAMU,OAAO,CAACC,GAAR,CACzCP,KAAK,CAACQ,GAAN,CACE,CAAC;AACCC,MAAAA,UADD;AAECC,MAAAA,GAFD;AAGCC,MAAAA,UAHD;AAICC,MAAAA,aAJD;AAKCC,MAAAA,oBALD;AAMCC,MAAAA;AAND,KAAD,KAeEtB,mBAAmB,CACjBiB,UADiB,EAEjBR,kBAFiB,EAGjBC,WAHiB,EAIjBS,UAJiB,EAKjBC,aALiB,EAMjBF,GANiB,EAOjBP,YAPiB,EAQjBU,oBARiB,EASjBd,IATiB,EAUjBK,KAViB,CAhBvB,CADyC,CAA3C;AA+BAP,IAAAA,UAAU,CAACD,QAAD,CAAV;AACD,GAjCsC,EAiCpC,CAACE,OAAD,EAAUG,kBAAV,EAA8BF,IAA9B,CAjCoC,CAAvC;AAmCAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,OAAO,IAAIG,kBAAX,IAAiCF,IAArC,EAA2C;AACzCM,MAAAA,mBAAmB;AACpB;AACF,GAJQ,EAIN,CAACP,OAAD,EAAUM,KAAV,EAAiBH,kBAAjB,EAAqCJ,UAArC,EAAiDE,IAAjD,CAJM,CAAT;AAMA,SAAOH,QAAP;AACD,CApDD;;AAsDA,eAAeD,iBAAf","sourcesContent":["import { useCallback, useEffect, useState } from 'react'\r\nimport { provider } from 'web3-core'\r\n\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from 'use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\n\r\nimport {\r\n  getMasterChefContract,\r\n  getWethContract,\r\n  getVbtcContract,\r\n  getFarms,\r\n  getTotalLPWethValue,\r\n} from '../vbtc/utils'\r\nimport useVBTC from './useVBTC'\r\nimport useBlock from './useBlock'\r\n\r\nexport interface StakedValue {\r\n  tokenAmount: BigNumber\r\n  wethAmount: BigNumber\r\n  totalWethValue: BigNumber\r\n  tokenPriceInWeth: BigNumber\r\n  poolWeight: BigNumber\r\n  multiplier: BigNumber\r\n}\r\n\r\nconst useAllStakedValue = () => {\r\n  const [balances, setBalance] = useState([] as Array<StakedValue>)\r\n  const { account }: { account: string; ethereum: provider } = useWallet()\r\n  const vbtc = useVBTC()\r\n  const farms = getFarms(vbtc)\r\n  const masterChefContract = getMasterChefContract(vbtc)\r\n  const wethContact = getWethContract(vbtc)\r\n  const vbtcContract = getVbtcContract(vbtc)\r\n  const block = useBlock()\r\n\r\n  const fetchAllStakedValue = useCallback(async () => {\r\n    const balances: Array<StakedValue> = await Promise.all(\r\n      farms.map(\r\n        ({\r\n          isBalancer,\r\n          pid,\r\n          lpContract,\r\n          tokenContract,\r\n          balancerPoolContract,\r\n          multiplier\r\n        }: {\r\n          isBalancer: boolean\r\n          pid: number\r\n          lpContract: Contract\r\n          tokenContract: Contract\r\n          balancerPoolContract: Contract\r\n          multiplier: number\r\n        }) =>\r\n          getTotalLPWethValue(\r\n            isBalancer,\r\n            masterChefContract,\r\n            wethContact,\r\n            lpContract,\r\n            tokenContract,\r\n            pid,\r\n            vbtcContract,\r\n            balancerPoolContract,\r\n            vbtc,\r\n            block\r\n          ),\r\n      ),\r\n    )\r\n    setBalance(balances)\r\n  }, [account, masterChefContract, vbtc])\r\n\r\n  useEffect(() => {\r\n    if (account && masterChefContract && vbtc) {\r\n      fetchAllStakedValue()\r\n    }\r\n  }, [account, block, masterChefContract, setBalance, vbtc])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllStakedValue\r\n"]},"metadata":{},"sourceType":"module"}