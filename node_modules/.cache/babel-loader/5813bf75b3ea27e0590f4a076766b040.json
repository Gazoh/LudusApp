{"ast":null,"code":"import BigNumber from 'bignumber.js';\nimport { ethers } from 'ethers';\nimport { getWeight } from '../utils/bpool';\nimport UNIV2PairAbi from './lib/abi/uni_v2_lp.json';\nimport ERC20Abi from './lib/abi/erc20.json';\nimport { contractAddresses } from './lib/constants.js';\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80\n});\nconst GAS_LIMIT = {\n  STAKING: {\n    DEFAULT: 200000,\n    SNX: 850000\n  }\n};\nexport const getMasterChefAddress = vbtc => {\n  return vbtc && vbtc.masterChefAddress;\n};\nexport const getVbtcAddress = vbtc => {\n  return vbtc && vbtc.vbtcAddress;\n};\nexport const getStrudelAddress = vbtc => {\n  return vbtc && vbtc.strudelAddress;\n};\nexport const getRelayContract = vbtc => {\n  return vbtc && vbtc.contracts && vbtc.contracts.relay;\n};\nexport const getWethContract = vbtc => {\n  return vbtc && vbtc.contracts && vbtc.contracts.weth;\n};\nexport const getMasterChefContract = vbtc => {\n  return vbtc && vbtc.contracts && vbtc.contracts.masterChef;\n};\nexport const getVbtcContract = vbtc => {\n  return vbtc && vbtc.contracts && vbtc.contracts.vbtc;\n};\nexport const getStrudelContract = vbtc => {\n  return vbtc && vbtc.contracts && vbtc.contracts.strudel;\n};\nexport const getFarms = vbtc => {\n  return vbtc ? vbtc.contracts.pools.map(({\n    pid,\n    isBalancer,\n    url,\n    name,\n    symbol,\n    icon,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    lpAddress,\n    lpContract,\n    balancerPoolAddress,\n    balancerPoolContract\n  }) => ({\n    pid,\n    isBalancer,\n    url,\n    id: symbol,\n    name,\n    lpToken: symbol,\n    lpTokenAddress: lpAddress,\n    lpContract,\n    tokenAddress,\n    tokenSymbol,\n    tokenContract,\n    earnToken: '$TRDL',\n    earnTokenAddress: vbtc.contracts.strudel.options.address,\n    icon,\n    balancerPoolAddress,\n    balancerPoolContract\n  })) : [];\n};\nexport const getPoolWeight = async (masterChefContract, pid) => {\n  const {\n    allocPoint\n  } = await masterChefContract.methods.poolInfo(pid).call();\n  const totalAllocPoint = await masterChefContract.methods.totalAllocPoint().call();\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint));\n};\nexport const getMultiplier = async (masterChefContract, blockNumber, vbtc) => {\n  if (blockNumber < 1) {\n    blockNumber = await vbtc.web3.eth.getBlockNumber();\n  }\n\n  const multiplier = await masterChefContract.methods.getMultiplier(blockNumber - 1, blockNumber).call();\n  return new BigNumber(multiplier).div(new BigNumber(10).pow(18));\n};\nexport const getEarned = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.pendingStrudel(pid, account).call();\n};\n\nconst getValueOfTbtcWeth = async (vbtc, wethContract, lpContract, portionLp) => {\n  // Get total weth value for the lpContract = w1\n  let tbtcPool = new vbtc.web3.eth.Contract(UNIV2PairAbi, contractAddresses.tbtcPool['1']);\n  let tbtc = new vbtc.web3.eth.Contract(ERC20Abi, contractAddresses.tbtc['1']);\n  const tbtcContractWeth = await wethContract.methods.balanceOf(tbtcPool.options.address).call();\n  const tbtcContractTbtc = await tbtc.methods.balanceOf(tbtcPool.options.address).call();\n  const lpContractTBTC = await tbtc.methods.balanceOf(lpContract.options.address).call();\n  let tbtcPrice = new BigNumber(tbtcContractWeth).div(new BigNumber(tbtcContractTbtc));\n  let lpContractWeth = new BigNumber(lpContractTBTC).times(tbtcPrice);\n  let totalLpWethValue = portionLp.times(lpContractWeth).times(new BigNumber(2));\n  return [totalLpWethValue, lpContractWeth];\n};\n\nexport const getTotalLPWethValue = async (isBalancer, masterChefContract, wethContract, lpContract, tokenContract, pid, vbtcContract, balancerPoolContract, vbtc, block) => {\n  // Get balance of the token address\n  const tokenAmountWholeLP = await tokenContract.methods.balanceOf(lpContract.options.address).call();\n  const tokenDecimals = await tokenContract.methods.decimals().call(); // Get the share of lpContract that masterChefContract owns\n\n  const balance = await lpContract.methods.balanceOf(masterChefContract.options.address).call(); // Convert that into the portion of total lpContract = p1\n\n  const totalSupply = await lpContract.methods.totalSupply().call(); //switch to Balancer Pool to get included wETH amount as ReservePoolController holds LP token and pool assets\n\n  if (isBalancer) {\n    lpContract = balancerPoolContract;\n  }\n\n  let totalLpWethValue;\n  let lpContractWeth; // Return p1 * w1 * 2\n\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply));\n  let lpWethWorth;\n\n  if (pid === 6) {\n    ;\n    [totalLpWethValue, lpContractWeth] = await getValueOfTbtcWeth(vbtc, wethContract, lpContract, portionLp);\n  } else {\n    // Get total weth value for the lpContract = w1\n    lpContractWeth = await wethContract.methods.balanceOf(lpContract.options.address).call();\n    lpWethWorth = new BigNumber(lpContractWeth); //include weight into account if it is the Balancer Pool\n\n    if (isBalancer) {\n      totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(1).plus(new BigNumber(await getWeight(lpContract, vbtcContract)))); //check for tBTC/vBTC contracts\n    } else {\n      totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2));\n    }\n  } // Calculate\n\n\n  const tokenAmount = new BigNumber(tokenAmountWholeLP).times(portionLp).div(new BigNumber(10).pow(tokenDecimals));\n  const wethAmount = new BigNumber(lpContractWeth).times(portionLp).div(new BigNumber(10).pow(18));\n  return {\n    tokenAmount,\n    wethAmount,\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\n    poolWeight: await getPoolWeight(masterChefContract, pid),\n    multiplier: await getMultiplier(masterChefContract, block, vbtc)\n  };\n};\nexport const approve = async (lpContract, masterChefContract, account) => {\n  return lpContract.methods.approve(masterChefContract.options.address, ethers.constants.MaxUint256).send({\n    from: account\n  });\n};\nexport const getVbtcSupply = async vbtc => {\n  return new BigNumber(await vbtc.contracts.vbtc.methods.totalSupply().call());\n};\nexport const getStrudelSupply = async strudel => {\n  return new BigNumber(await strudel.contracts.strudel.methods.totalSupply().call());\n};\nexport const proofOpReturnAndMint = async (vbtcContract, account, proof, burnOutputIndex) => {\n  return vbtcContract.methods.proofOpReturnAndMint(proof.header, proof.proof, proof.version, proof.locktime, Number(proof.index), Number(burnOutputIndex), proof.vin, proof.vout).send({\n    from: account\n  }).on('transactionHash', tx => {\n    return tx.transactionHash;\n  });\n};\nexport const stake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.deposit(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const unstake = async (masterChefContract, pid, amount, account) => {\n  return masterChefContract.methods.withdraw(pid, new BigNumber(amount).times(new BigNumber(10).pow(18)).toString()).send({\n    from: account\n  }).on('transactionHash', tx => {\n    console.log(tx);\n    return tx.transactionHash;\n  });\n};\nexport const harvest = async (masterChefContract, pid, account) => {\n  return masterChefContract.methods.deposit(pid, '0').send({\n    from: account\n  }).on('transactionHash', tx => {\n    //console.log(tx)\n    return tx.transactionHash;\n  });\n};\nexport const getStaked = async (masterChefContract, pid, account) => {\n  try {\n    const {\n      amount\n    } = await masterChefContract.methods.userInfo(pid, account).call();\n    return new BigNumber(amount);\n  } catch {\n    return new BigNumber(0);\n  }\n};\nexport const redeem = async (masterChefContract, account) => {\n  let now = new Date().getTime() / 1000;\n\n  if (now >= 1597172400) {\n    return masterChefContract.methods.exit().send({\n      from: account\n    }).on('transactionHash', tx => {\n      console.log(tx);\n      return tx.transactionHash;\n    });\n  } else {\n    alert('pool not active');\n  }\n};","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/vbtc/utils.js"],"names":["BigNumber","ethers","getWeight","UNIV2PairAbi","ERC20Abi","contractAddresses","config","EXPONENTIAL_AT","DECIMAL_PLACES","GAS_LIMIT","STAKING","DEFAULT","SNX","getMasterChefAddress","vbtc","masterChefAddress","getVbtcAddress","vbtcAddress","getStrudelAddress","strudelAddress","getRelayContract","contracts","relay","getWethContract","weth","getMasterChefContract","masterChef","getVbtcContract","getStrudelContract","strudel","getFarms","pools","map","pid","isBalancer","url","name","symbol","icon","tokenAddress","tokenSymbol","tokenContract","lpAddress","lpContract","balancerPoolAddress","balancerPoolContract","id","lpToken","lpTokenAddress","earnToken","earnTokenAddress","options","address","getPoolWeight","masterChefContract","allocPoint","methods","poolInfo","call","totalAllocPoint","div","getMultiplier","blockNumber","web3","eth","getBlockNumber","multiplier","pow","getEarned","account","pendingStrudel","getValueOfTbtcWeth","wethContract","portionLp","tbtcPool","Contract","tbtc","tbtcContractWeth","balanceOf","tbtcContractTbtc","lpContractTBTC","tbtcPrice","lpContractWeth","times","totalLpWethValue","getTotalLPWethValue","vbtcContract","block","tokenAmountWholeLP","tokenDecimals","decimals","balance","totalSupply","lpWethWorth","plus","tokenAmount","wethAmount","totalWethValue","tokenPriceInWeth","poolWeight","approve","constants","MaxUint256","send","from","getVbtcSupply","getStrudelSupply","proofOpReturnAndMint","proof","burnOutputIndex","header","version","locktime","Number","index","vin","vout","on","tx","transactionHash","stake","amount","deposit","toString","console","log","unstake","withdraw","harvest","getStaked","userInfo","redeem","now","Date","getTime","exit","alert"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport { ethers } from 'ethers'\r\nimport { getWeight } from '../utils/bpool'\r\nimport UNIV2PairAbi from './lib/abi/uni_v2_lp.json'\r\nimport ERC20Abi from './lib/abi/erc20.json'\r\nimport { contractAddresses } from './lib/constants.js'\r\nBigNumber.config({\r\n  EXPONENTIAL_AT: 1000,\r\n  DECIMAL_PLACES: 80,\r\n})\r\n\r\nconst GAS_LIMIT = {\r\n  STAKING: {\r\n    DEFAULT: 200000,\r\n    SNX: 850000,\r\n  },\r\n}\r\n\r\nexport const getMasterChefAddress = (vbtc) => {\r\n  return vbtc && vbtc.masterChefAddress\r\n}\r\nexport const getVbtcAddress = (vbtc) => {\r\n  return vbtc && vbtc.vbtcAddress\r\n}\r\n\r\nexport const getStrudelAddress = (vbtc) => {\r\n  return vbtc && vbtc.strudelAddress\r\n}\r\n\r\nexport const getRelayContract = (vbtc) => {\r\n  return vbtc && vbtc.contracts && vbtc.contracts.relay\r\n}\r\n\r\nexport const getWethContract = (vbtc) => {\r\n  return vbtc && vbtc.contracts && vbtc.contracts.weth\r\n}\r\n\r\nexport const getMasterChefContract = (vbtc) => {\r\n  return vbtc && vbtc.contracts && vbtc.contracts.masterChef\r\n}\r\nexport const getVbtcContract = (vbtc) => {\r\n  return vbtc && vbtc.contracts && vbtc.contracts.vbtc\r\n}\r\n\r\nexport const getStrudelContract = (vbtc) => {\r\n  return vbtc && vbtc.contracts && vbtc.contracts.strudel\r\n}\r\n\r\nexport const getFarms = (vbtc) => {\r\n  return vbtc\r\n    ? vbtc.contracts.pools.map(\r\n        ({\r\n          pid,\r\n          isBalancer,\r\n          url,\r\n          name,\r\n          symbol,\r\n          icon,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          lpAddress,\r\n          lpContract,\r\n          balancerPoolAddress,\r\n          balancerPoolContract,\r\n        }) => ({\r\n          pid,\r\n          isBalancer,\r\n          url,\r\n          id: symbol,\r\n          name,\r\n          lpToken: symbol,\r\n          lpTokenAddress: lpAddress,\r\n          lpContract,\r\n          tokenAddress,\r\n          tokenSymbol,\r\n          tokenContract,\r\n          earnToken: '$TRDL',\r\n          earnTokenAddress: vbtc.contracts.strudel.options.address,\r\n          icon,\r\n          balancerPoolAddress,\r\n          balancerPoolContract,\r\n        }),\r\n      )\r\n    : []\r\n}\r\n\r\nexport const getPoolWeight = async (masterChefContract, pid) => {\r\n  const { allocPoint } = await masterChefContract.methods.poolInfo(pid).call()\r\n  const totalAllocPoint = await masterChefContract.methods\r\n    .totalAllocPoint()\r\n    .call()\r\n  return new BigNumber(allocPoint).div(new BigNumber(totalAllocPoint))\r\n}\r\n\r\nexport const getMultiplier = async (masterChefContract, blockNumber, vbtc) => {\r\n  if(blockNumber < 1){\r\n    blockNumber = await vbtc.web3.eth.getBlockNumber()\r\n  }\r\n    const multiplier = await masterChefContract.methods.getMultiplier(blockNumber -1, blockNumber).call()\r\n    return new BigNumber(multiplier).div(new BigNumber(10).pow(18))\r\n  \r\n}\r\n\r\nexport const getEarned = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods.pendingStrudel(pid, account).call()\r\n}\r\n\r\nconst getValueOfTbtcWeth = async (\r\n  vbtc,\r\n  wethContract,\r\n  lpContract,\r\n  portionLp,\r\n) => {\r\n  // Get total weth value for the lpContract = w1\r\n  let tbtcPool = new vbtc.web3.eth.Contract(\r\n    UNIV2PairAbi,\r\n    contractAddresses.tbtcPool['1'],\r\n  )\r\n  let tbtc = new vbtc.web3.eth.Contract(ERC20Abi, contractAddresses.tbtc['1'])\r\n  const tbtcContractWeth = await wethContract.methods\r\n    .balanceOf(tbtcPool.options.address)\r\n    .call()\r\n  const tbtcContractTbtc = await tbtc.methods\r\n    .balanceOf(tbtcPool.options.address)\r\n    .call()\r\n  const lpContractTBTC = await tbtc.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  let tbtcPrice = new BigNumber(tbtcContractWeth).div(\r\n    new BigNumber(tbtcContractTbtc),\r\n  )\r\n  let lpContractWeth = new BigNumber(lpContractTBTC).times(tbtcPrice)\r\n  let totalLpWethValue = portionLp.times(lpContractWeth).times(new BigNumber(2))\r\n  return [totalLpWethValue, lpContractWeth]\r\n}\r\n\r\nexport const getTotalLPWethValue = async (\r\n  isBalancer,\r\n  masterChefContract,\r\n  wethContract,\r\n  lpContract,\r\n  tokenContract,\r\n  pid,\r\n  vbtcContract,\r\n  balancerPoolContract,\r\n  vbtc,\r\n  block\r\n) => {\r\n  // Get balance of the token address\r\n  const tokenAmountWholeLP = await tokenContract.methods\r\n    .balanceOf(lpContract.options.address)\r\n    .call()\r\n  const tokenDecimals = await tokenContract.methods.decimals().call()\r\n  // Get the share of lpContract that masterChefContract owns\r\n  const balance = await lpContract.methods\r\n    .balanceOf(masterChefContract.options.address)\r\n    .call()\r\n  // Convert that into the portion of total lpContract = p1\r\n  const totalSupply = await lpContract.methods.totalSupply().call()\r\n\r\n  //switch to Balancer Pool to get included wETH amount as ReservePoolController holds LP token and pool assets\r\n  if (isBalancer) {\r\n    lpContract = balancerPoolContract\r\n  }\r\n  let totalLpWethValue\r\n  let lpContractWeth\r\n  // Return p1 * w1 * 2\r\n  const portionLp = new BigNumber(balance).div(new BigNumber(totalSupply))\r\n  let lpWethWorth\r\n  if (pid === 6) {\r\n    ;[totalLpWethValue, lpContractWeth] = await getValueOfTbtcWeth(\r\n      vbtc,\r\n      wethContract,\r\n      lpContract,\r\n      portionLp,\r\n    )\r\n  } else {\r\n    // Get total weth value for the lpContract = w1\r\n    lpContractWeth = await wethContract.methods\r\n      .balanceOf(lpContract.options.address)\r\n      .call()\r\n\r\n    lpWethWorth = new BigNumber(lpContractWeth)\r\n\r\n    //include weight into account if it is the Balancer Pool\r\n    if (isBalancer) {\r\n      totalLpWethValue = portionLp\r\n        .times(lpWethWorth)\r\n        .times(\r\n          new BigNumber(1).plus(\r\n            new BigNumber(await getWeight(lpContract, vbtcContract)),\r\n          ),\r\n        )\r\n      //check for tBTC/vBTC contracts\r\n    } else {\r\n      totalLpWethValue = portionLp.times(lpWethWorth).times(new BigNumber(2))\r\n    }\r\n  }\r\n  // Calculate\r\n  const tokenAmount = new BigNumber(tokenAmountWholeLP)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(tokenDecimals))\r\n\r\n  const wethAmount = new BigNumber(lpContractWeth)\r\n    .times(portionLp)\r\n    .div(new BigNumber(10).pow(18))\r\n  return {\r\n    tokenAmount,\r\n    wethAmount,\r\n    totalWethValue: totalLpWethValue.div(new BigNumber(10).pow(18)),\r\n    tokenPriceInWeth: wethAmount.div(tokenAmount),\r\n    poolWeight: await getPoolWeight(masterChefContract, pid),\r\n    multiplier: await getMultiplier(masterChefContract, block, vbtc)\r\n  }\r\n}\r\n\r\nexport const approve = async (lpContract, masterChefContract, account) => {\r\n  return lpContract.methods\r\n    .approve(masterChefContract.options.address, ethers.constants.MaxUint256)\r\n    .send({ from: account })\r\n}\r\n\r\nexport const getVbtcSupply = async (vbtc) => {\r\n  return new BigNumber(await vbtc.contracts.vbtc.methods.totalSupply().call())\r\n}\r\n\r\nexport const getStrudelSupply = async (strudel) => {\r\n  return new BigNumber(\r\n    await strudel.contracts.strudel.methods.totalSupply().call(),\r\n  )\r\n}\r\n\r\nexport const proofOpReturnAndMint = async (\r\n  vbtcContract,\r\n  account,\r\n  proof,\r\n  burnOutputIndex,\r\n) => {\r\n  return vbtcContract.methods\r\n    .proofOpReturnAndMint(\r\n      proof.header,\r\n      proof.proof,\r\n      proof.version,\r\n      proof.locktime,\r\n      Number(proof.index),\r\n      Number(burnOutputIndex),\r\n      proof.vin,\r\n      proof.vout,\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const stake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const unstake = async (masterChefContract, pid, amount, account) => {\r\n  return masterChefContract.methods\r\n    .withdraw(\r\n      pid,\r\n      new BigNumber(amount).times(new BigNumber(10).pow(18)).toString(),\r\n    )\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\nexport const harvest = async (masterChefContract, pid, account) => {\r\n  return masterChefContract.methods\r\n    .deposit(pid, '0')\r\n    .send({ from: account })\r\n    .on('transactionHash', (tx) => {\r\n      //console.log(tx)\r\n      return tx.transactionHash\r\n    })\r\n}\r\n\r\nexport const getStaked = async (masterChefContract, pid, account) => {\r\n  try {\r\n    const { amount } = await masterChefContract.methods\r\n      .userInfo(pid, account)\r\n      .call()\r\n    return new BigNumber(amount)\r\n  } catch {\r\n    return new BigNumber(0)\r\n  }\r\n}\r\n\r\nexport const redeem = async (masterChefContract, account) => {\r\n  let now = new Date().getTime() / 1000\r\n  if (now >= 1597172400) {\r\n    return masterChefContract.methods\r\n      .exit()\r\n      .send({ from: account })\r\n      .on('transactionHash', (tx) => {\r\n        console.log(tx)\r\n        return tx.transactionHash\r\n      })\r\n  } else {\r\n    alert('pool not active')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}