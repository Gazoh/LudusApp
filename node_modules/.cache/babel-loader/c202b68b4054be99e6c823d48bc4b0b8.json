{"ast":null,"code":"import BigNumber from 'bignumber.js/bignumber';\nimport ERC20Abi from './abi/erc20.json';\nimport MasterChefAbi from './abi/masterchef.json';\nimport StrudelAbi from './abi/StrudelToken.json';\nimport VBTCAbi from './abi/vbtc.json';\nimport UNIV2PairAbi from './abi/uni_v2_lp.json';\nimport WETHAbi from './abi/weth.json';\nimport BalancerPool from './abi/BPool.json';\nimport RelayAbi from './abi/Relay.json';\nimport { contractAddresses, SUBTRACT_GAS_LIMIT, supportedPools } from './constants.js';\nimport * as Types from './types.js';\nexport class Contracts {\n  constructor(provider, networkId, web3, options) {\n    this.web3 = web3;\n    this.defaultConfirmations = options.defaultConfirmations;\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5;\n    this.confirmationType = options.confirmationType || Types.ConfirmationType.Confirmed;\n    this.defaultGas = options.defaultGas;\n    this.defaultGasPrice = options.defaultGasPrice;\n    this.strudel = new this.web3.eth.Contract(StrudelAbi);\n    this.vbtc = new this.web3.eth.Contract(VBTCAbi);\n    this.masterChef = new this.web3.eth.Contract(MasterChefAbi);\n    this.weth = new this.web3.eth.Contract(WETHAbi);\n    this.relay = new this.web3.eth.Contract(RelayAbi);\n    this.pools = supportedPools.map(pool => Object.assign(pool, {\n      lpAddress: pool.lpAddresses[networkId],\n      tokenAddress: pool.tokenAddresses[networkId],\n      lpContract: pool.isBalancer ? new this.web3.eth.Contract(ERC20Abi) : new this.web3.eth.Contract(UNIV2PairAbi),\n      tokenContract: new this.web3.eth.Contract(ERC20Abi),\n      balancerPoolAddress: pool.balancerPoolAddresses ? pool.balancerPoolAddresses[networkId] : undefined,\n      balancerPoolContract: new this.web3.eth.Contract(BalancerPool)\n    }));\n    this.setProvider(provider, networkId);\n    this.setDefaultAccount(this.web3.eth.defaultAccount);\n  }\n\n  setProvider(provider, networkId) {\n    const setProvider = (contract, address) => {\n      contract.setProvider(provider);\n      if (address) contract.options.address = address;else console.error('Contract address not found in network', networkId);\n    };\n\n    setProvider(this.vbtc, contractAddresses.vbtc[networkId]);\n    setProvider(this.strudel, contractAddresses.strudel[networkId]);\n    setProvider(this.masterChef, contractAddresses.masterChef[networkId]);\n    setProvider(this.weth, contractAddresses.weth[networkId]);\n    setProvider(this.relay, contractAddresses.relay[networkId]);\n    this.pools.forEach(({\n      lpContract,\n      lpAddress,\n      tokenContract,\n      tokenAddress,\n      balancerPoolAddress,\n      balancerPoolContract\n    }) => {\n      if (balancerPoolAddress) {\n        setProvider(balancerPoolContract, balancerPoolAddress);\n      }\n\n      setProvider(lpContract, lpAddress);\n      setProvider(tokenContract, tokenAddress);\n    });\n  }\n\n  setDefaultAccount(account) {\n    this.vbtc.options.from = account;\n    this.strudel.options.from = account;\n    this.masterChef.options.from = account;\n  }\n\n  async callContractFunction(method, options) {\n    const {\n      confirmations,\n      confirmationType,\n      autoGasMultiplier,\n      ...txOptions\n    } = options;\n\n    if (!this.blockGasLimit) {\n      await this.setGasLimit();\n    }\n\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\n      txOptions.gasPrice = this.defaultGasPrice;\n    }\n\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\n      let gasEstimate;\n\n      if (this.defaultGas && confirmationType !== Types.ConfirmationType.Simulate) {\n        txOptions.gas = this.defaultGas;\n      } else {\n        try {\n          console.log('estimating gas');\n          gasEstimate = await method.estimateGas(txOptions);\n        } catch (error) {\n          const data = method.encodeABI();\n          const {\n            from,\n            value\n          } = options;\n          const to = method._parent._address;\n          error.transactionData = {\n            from,\n            value,\n            data,\n            to\n          };\n          throw error;\n        }\n\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier;\n        const totalGas = Math.floor(gasEstimate * multiplier);\n        txOptions.gas = totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit;\n      }\n\n      if (confirmationType === Types.ConfirmationType.Simulate) {\n        let g = txOptions.gas;\n        return {\n          gasEstimate,\n          g\n        };\n      }\n    }\n\n    if (txOptions.value) {\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0);\n    } else {\n      txOptions.value = '0';\n    }\n\n    const promi = method.send(txOptions);\n    const OUTCOMES = {\n      INITIAL: 0,\n      RESOLVED: 1,\n      REJECTED: 2\n    };\n    let hashOutcome = OUTCOMES.INITIAL;\n    let confirmationOutcome = OUTCOMES.INITIAL;\n    const t = confirmationType !== undefined ? confirmationType : this.confirmationType;\n\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\n      throw new Error(`Invalid confirmation type: ${t}`);\n    }\n\n    let hashPromise;\n    let confirmationPromise;\n\n    if (t === Types.ConfirmationType.Hash || t === Types.ConfirmationType.Both) {\n      hashPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        promi.on('transactionHash', txHash => {\n          if (hashOutcome === OUTCOMES.INITIAL) {\n            hashOutcome = OUTCOMES.RESOLVED;\n            resolve(txHash);\n\n            if (t !== Types.ConfirmationType.Both) {\n              const anyPromi = promi;\n              anyPromi.off();\n            }\n          }\n        });\n      });\n    }\n\n    if (t === Types.ConfirmationType.Confirmed || t === Types.ConfirmationType.Both) {\n      confirmationPromise = new Promise((resolve, reject) => {\n        promi.on('error', error => {\n          if ((t === Types.ConfirmationType.Confirmed || hashOutcome === OUTCOMES.RESOLVED) && confirmationOutcome === OUTCOMES.INITIAL) {\n            confirmationOutcome = OUTCOMES.REJECTED;\n            reject(error);\n            const anyPromi = promi;\n            anyPromi.off();\n          }\n        });\n        const desiredConf = confirmations || this.defaultConfirmations;\n\n        if (desiredConf) {\n          promi.on('confirmation', (confNumber, receipt) => {\n            if (confNumber >= desiredConf) {\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\n                confirmationOutcome = OUTCOMES.RESOLVED;\n                resolve(receipt);\n                const anyPromi = promi;\n                anyPromi.off();\n              }\n            }\n          });\n        } else {\n          promi.on('receipt', receipt => {\n            confirmationOutcome = OUTCOMES.RESOLVED;\n            resolve(receipt);\n            const anyPromi = promi;\n            anyPromi.off();\n          });\n        }\n      });\n    }\n\n    if (t === Types.ConfirmationType.Hash) {\n      const transactionHash = await hashPromise;\n\n      if (this.notifier) {\n        this.notifier.hash(transactionHash);\n      }\n\n      return {\n        transactionHash\n      };\n    }\n\n    if (t === Types.ConfirmationType.Confirmed) {\n      return confirmationPromise;\n    }\n\n    const transactionHash = await hashPromise;\n\n    if (this.notifier) {\n      this.notifier.hash(transactionHash);\n    }\n\n    return {\n      transactionHash,\n      confirmation: confirmationPromise\n    };\n  }\n\n  async callConstantContractFunction(method, options) {\n    const m2 = method;\n    const {\n      blockNumber,\n      ...txOptions\n    } = options;\n    return m2.call(txOptions, blockNumber);\n  }\n\n  async setGasLimit() {\n    const block = await this.web3.eth.getBlock('latest');\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT;\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/vbtc/lib/contracts.js"],"names":["BigNumber","ERC20Abi","MasterChefAbi","StrudelAbi","VBTCAbi","UNIV2PairAbi","WETHAbi","BalancerPool","RelayAbi","contractAddresses","SUBTRACT_GAS_LIMIT","supportedPools","Types","Contracts","constructor","provider","networkId","web3","options","defaultConfirmations","autoGasMultiplier","confirmationType","ConfirmationType","Confirmed","defaultGas","defaultGasPrice","strudel","eth","Contract","vbtc","masterChef","weth","relay","pools","map","pool","Object","assign","lpAddress","lpAddresses","tokenAddress","tokenAddresses","lpContract","isBalancer","tokenContract","balancerPoolAddress","balancerPoolAddresses","undefined","balancerPoolContract","setProvider","setDefaultAccount","defaultAccount","contract","address","console","error","forEach","account","from","callContractFunction","method","confirmations","txOptions","blockGasLimit","setGasLimit","gasPrice","Simulate","gas","gasEstimate","log","estimateGas","data","encodeABI","value","to","_parent","_address","transactionData","multiplier","totalGas","Math","floor","g","toFixed","promi","send","OUTCOMES","INITIAL","RESOLVED","REJECTED","hashOutcome","confirmationOutcome","t","values","includes","Error","hashPromise","confirmationPromise","Hash","Both","Promise","resolve","reject","on","anyPromi","off","txHash","desiredConf","confNumber","receipt","transactionHash","notifier","hash","confirmation","callConstantContractFunction","m2","blockNumber","call","block","getBlock","gasLimit"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\r\nimport ERC20Abi from './abi/erc20.json'\r\nimport MasterChefAbi from './abi/masterchef.json'\r\nimport StrudelAbi from './abi/StrudelToken.json'\r\nimport VBTCAbi from './abi/vbtc.json'\r\nimport UNIV2PairAbi from './abi/uni_v2_lp.json'\r\nimport WETHAbi from './abi/weth.json'\r\nimport BalancerPool from './abi/BPool.json'\r\nimport RelayAbi from './abi/Relay.json'\r\nimport {\r\n  contractAddresses,\r\n  SUBTRACT_GAS_LIMIT,\r\n  supportedPools,\r\n} from './constants.js'\r\nimport * as Types from './types.js'\r\n\r\nexport class Contracts {\r\n  constructor(provider, networkId, web3, options) {\r\n    this.web3 = web3\r\n    this.defaultConfirmations = options.defaultConfirmations\r\n    this.autoGasMultiplier = options.autoGasMultiplier || 1.5\r\n    this.confirmationType =\r\n      options.confirmationType || Types.ConfirmationType.Confirmed\r\n    this.defaultGas = options.defaultGas\r\n    this.defaultGasPrice = options.defaultGasPrice\r\n\r\n    this.strudel = new this.web3.eth.Contract(StrudelAbi)\r\n    this.vbtc = new this.web3.eth.Contract(VBTCAbi)\r\n    this.masterChef = new this.web3.eth.Contract(MasterChefAbi)\r\n    this.weth = new this.web3.eth.Contract(WETHAbi)\r\n    this.relay = new this.web3.eth.Contract(RelayAbi)\r\n\r\n    this.pools = supportedPools.map((pool) =>\r\n      Object.assign(pool, {\r\n        lpAddress: pool.lpAddresses[networkId],\r\n        tokenAddress: pool.tokenAddresses[networkId],\r\n        lpContract: pool.isBalancer\r\n          ? new this.web3.eth.Contract(ERC20Abi)\r\n          : new this.web3.eth.Contract(UNIV2PairAbi),\r\n        tokenContract: new this.web3.eth.Contract(ERC20Abi),\r\n        balancerPoolAddress: pool.balancerPoolAddresses\r\n          ? pool.balancerPoolAddresses[networkId]\r\n          : undefined,\r\n        balancerPoolContract: new this.web3.eth.Contract(BalancerPool),\r\n      }),\r\n    )\r\n\r\n    this.setProvider(provider, networkId)\r\n    this.setDefaultAccount(this.web3.eth.defaultAccount)\r\n  }\r\n\r\n  setProvider(provider, networkId) {\r\n    const setProvider = (contract, address) => {\r\n      contract.setProvider(provider)\r\n      if (address) contract.options.address = address\r\n      else console.error('Contract address not found in network', networkId)\r\n    }\r\n\r\n    setProvider(this.vbtc, contractAddresses.vbtc[networkId])\r\n    setProvider(this.strudel, contractAddresses.strudel[networkId])\r\n    setProvider(this.masterChef, contractAddresses.masterChef[networkId])\r\n    setProvider(this.weth, contractAddresses.weth[networkId])\r\n    setProvider(this.relay, contractAddresses.relay[networkId])\r\n\r\n    this.pools.forEach(\r\n      ({\r\n        lpContract,\r\n        lpAddress,\r\n        tokenContract,\r\n        tokenAddress,\r\n        balancerPoolAddress,\r\n        balancerPoolContract,\r\n      }) => {\r\n        if (balancerPoolAddress) {\r\n          setProvider(balancerPoolContract, balancerPoolAddress)\r\n        }\r\n        setProvider(lpContract, lpAddress)\r\n        setProvider(tokenContract, tokenAddress)\r\n      },\r\n    )\r\n  }\r\n\r\n  setDefaultAccount(account) {\r\n    this.vbtc.options.from = account\r\n    this.strudel.options.from = account\r\n    this.masterChef.options.from = account\r\n  }\r\n\r\n  async callContractFunction(method, options) {\r\n    const {\r\n      confirmations,\r\n      confirmationType,\r\n      autoGasMultiplier,\r\n      ...txOptions\r\n    } = options\r\n\r\n    if (!this.blockGasLimit) {\r\n      await this.setGasLimit()\r\n    }\r\n\r\n    if (!txOptions.gasPrice && this.defaultGasPrice) {\r\n      txOptions.gasPrice = this.defaultGasPrice\r\n    }\r\n\r\n    if (confirmationType === Types.ConfirmationType.Simulate || !options.gas) {\r\n      let gasEstimate\r\n      if (\r\n        this.defaultGas &&\r\n        confirmationType !== Types.ConfirmationType.Simulate\r\n      ) {\r\n        txOptions.gas = this.defaultGas\r\n      } else {\r\n        try {\r\n          console.log('estimating gas')\r\n          gasEstimate = await method.estimateGas(txOptions)\r\n        } catch (error) {\r\n          const data = method.encodeABI()\r\n          const { from, value } = options\r\n          const to = method._parent._address\r\n          error.transactionData = { from, value, data, to }\r\n          throw error\r\n        }\r\n\r\n        const multiplier = autoGasMultiplier || this.autoGasMultiplier\r\n        const totalGas = Math.floor(gasEstimate * multiplier)\r\n        txOptions.gas =\r\n          totalGas < this.blockGasLimit ? totalGas : this.blockGasLimit\r\n      }\r\n\r\n      if (confirmationType === Types.ConfirmationType.Simulate) {\r\n        let g = txOptions.gas\r\n        return { gasEstimate, g }\r\n      }\r\n    }\r\n\r\n    if (txOptions.value) {\r\n      txOptions.value = new BigNumber(txOptions.value).toFixed(0)\r\n    } else {\r\n      txOptions.value = '0'\r\n    }\r\n\r\n    const promi = method.send(txOptions)\r\n\r\n    const OUTCOMES = {\r\n      INITIAL: 0,\r\n      RESOLVED: 1,\r\n      REJECTED: 2,\r\n    }\r\n\r\n    let hashOutcome = OUTCOMES.INITIAL\r\n    let confirmationOutcome = OUTCOMES.INITIAL\r\n\r\n    const t =\r\n      confirmationType !== undefined ? confirmationType : this.confirmationType\r\n\r\n    if (!Object.values(Types.ConfirmationType).includes(t)) {\r\n      throw new Error(`Invalid confirmation type: ${t}`)\r\n    }\r\n\r\n    let hashPromise\r\n    let confirmationPromise\r\n\r\n    if (\r\n      t === Types.ConfirmationType.Hash ||\r\n      t === Types.ConfirmationType.Both\r\n    ) {\r\n      hashPromise = new Promise((resolve, reject) => {\r\n        promi.on('error', (error) => {\r\n          if (hashOutcome === OUTCOMES.INITIAL) {\r\n            hashOutcome = OUTCOMES.REJECTED\r\n            reject(error)\r\n            const anyPromi = promi\r\n            anyPromi.off()\r\n          }\r\n        })\r\n\r\n        promi.on('transactionHash', (txHash) => {\r\n          if (hashOutcome === OUTCOMES.INITIAL) {\r\n            hashOutcome = OUTCOMES.RESOLVED\r\n            resolve(txHash)\r\n            if (t !== Types.ConfirmationType.Both) {\r\n              const anyPromi = promi\r\n              anyPromi.off()\r\n            }\r\n          }\r\n        })\r\n      })\r\n    }\r\n\r\n    if (\r\n      t === Types.ConfirmationType.Confirmed ||\r\n      t === Types.ConfirmationType.Both\r\n    ) {\r\n      confirmationPromise = new Promise((resolve, reject) => {\r\n        promi.on('error', (error) => {\r\n          if (\r\n            (t === Types.ConfirmationType.Confirmed ||\r\n              hashOutcome === OUTCOMES.RESOLVED) &&\r\n            confirmationOutcome === OUTCOMES.INITIAL\r\n          ) {\r\n            confirmationOutcome = OUTCOMES.REJECTED\r\n            reject(error)\r\n            const anyPromi = promi\r\n            anyPromi.off()\r\n          }\r\n        })\r\n\r\n        const desiredConf = confirmations || this.defaultConfirmations\r\n        if (desiredConf) {\r\n          promi.on('confirmation', (confNumber, receipt) => {\r\n            if (confNumber >= desiredConf) {\r\n              if (confirmationOutcome === OUTCOMES.INITIAL) {\r\n                confirmationOutcome = OUTCOMES.RESOLVED\r\n                resolve(receipt)\r\n                const anyPromi = promi\r\n                anyPromi.off()\r\n              }\r\n            }\r\n          })\r\n        } else {\r\n          promi.on('receipt', (receipt) => {\r\n            confirmationOutcome = OUTCOMES.RESOLVED\r\n            resolve(receipt)\r\n            const anyPromi = promi\r\n            anyPromi.off()\r\n          })\r\n        }\r\n      })\r\n    }\r\n\r\n    if (t === Types.ConfirmationType.Hash) {\r\n      const transactionHash = await hashPromise\r\n      if (this.notifier) {\r\n        this.notifier.hash(transactionHash)\r\n      }\r\n      return { transactionHash }\r\n    }\r\n\r\n    if (t === Types.ConfirmationType.Confirmed) {\r\n      return confirmationPromise\r\n    }\r\n\r\n    const transactionHash = await hashPromise\r\n    if (this.notifier) {\r\n      this.notifier.hash(transactionHash)\r\n    }\r\n    return {\r\n      transactionHash,\r\n      confirmation: confirmationPromise,\r\n    }\r\n  }\r\n\r\n  async callConstantContractFunction(method, options) {\r\n    const m2 = method\r\n    const { blockNumber, ...txOptions } = options\r\n    return m2.call(txOptions, blockNumber)\r\n  }\r\n\r\n  async setGasLimit() {\r\n    const block = await this.web3.eth.getBlock('latest')\r\n    this.blockGasLimit = block.gasLimit - SUBTRACT_GAS_LIMIT\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}