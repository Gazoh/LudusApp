{"ast":null,"code":"import Web3 from 'web3';\nimport BigNumber from 'bignumber.js';\nimport { Contracts } from './lib/contracts.js';\nimport { Account } from './lib/accounts.js';\nimport { EVM } from './lib/evm.js';\nimport { contractAddresses } from './lib/constants';\nexport class Vbtc {\n  constructor(provider, networkId, testing, options) {\n    var realProvider;\n\n    if (typeof provider === 'string') {\n      if (provider.includes('wss')) {\n        realProvider = new Web3.providers.WebsocketProvider(provider, options.ethereumNodeTimeout || 10000);\n      } else {\n        realProvider = new Web3.providers.HttpProvider(provider, options.ethereumNodeTimeout || 10000);\n      }\n    } else {\n      realProvider = provider;\n    }\n\n    this.web3 = new Web3(realProvider);\n\n    if (testing) {\n      this.testing = new EVM(realProvider);\n      this.snapshot = this.testing.snapshot();\n    }\n\n    if (options.defaultAccount) {\n      this.web3.eth.defaultAccount = options.defaultAccount;\n    }\n\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options);\n    this.vbtcAddress = contractAddresses.vbtc[networkId];\n    this.masterChefAddress = contractAddresses.masterChef[networkId];\n    this.wethAddress = contractAddresses.weth[networkId];\n    this.strudelAddress = contractAddresses.strudel[networkId];\n  }\n\n  async resetEVM() {\n    this.testing.resetEVM(this.snapshot);\n  }\n\n  addAccount(address, number) {\n    this.accounts.push(new Account(this.contracts, address, number));\n  }\n\n  setProvider(provider, networkId) {\n    this.web3.setProvider(provider);\n    this.contracts.setProvider(provider, networkId);\n    this.operation.setNetworkId(networkId);\n  }\n\n  setDefaultAccount(account) {\n    this.web3.eth.defaultAccount = account;\n    this.contracts.setDefaultAccount(account);\n  }\n\n  getDefaultAccount() {\n    return this.web3.eth.defaultAccount;\n  }\n\n  loadAccount(account) {\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey);\n\n    if (!newAccount || account.address && account.address.toLowerCase() !== newAccount.address.toLowerCase()) {\n      throw new Error(`Loaded account address mismatch.\n        Expected ${account.address}, got ${newAccount ? newAccount.address : null}`);\n    }\n  }\n\n  toBigN(a) {\n    return BigNumber(a);\n  }\n\n}","map":{"version":3,"sources":["C:/xampp/htdocs/LudusApp/src/vbtc/Vbtc.js"],"names":["Web3","BigNumber","Contracts","Account","EVM","contractAddresses","Vbtc","constructor","provider","networkId","testing","options","realProvider","includes","providers","WebsocketProvider","ethereumNodeTimeout","HttpProvider","web3","snapshot","defaultAccount","eth","contracts","vbtcAddress","vbtc","masterChefAddress","masterChef","wethAddress","weth","strudelAddress","strudel","resetEVM","addAccount","address","number","accounts","push","setProvider","operation","setNetworkId","setDefaultAccount","account","getDefaultAccount","loadAccount","newAccount","wallet","add","privateKey","toLowerCase","Error","toBigN","a"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,MAAjB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,SAAQC,OAAR,QAAsB,mBAAtB;AACA,SAAQC,GAAR,QAAkB,cAAlB;AAEA,SAAQC,iBAAR,QAAgC,iBAAhC;AAEA,OAAO,MAAMC,IAAN,CAAW;AAChBC,EAAAA,WAAW,CAACC,QAAD,EAAWC,SAAX,EAAsBC,OAAtB,EAA+BC,OAA/B,EAAwC;AACjD,QAAIC,YAAJ;;AACA,QAAI,OAAOJ,QAAP,KAAoB,QAAxB,EAAkC;AAChC,UAAIA,QAAQ,CAACK,QAAT,CAAkB,KAAlB,CAAJ,EAA8B;AAC5BD,QAAAA,YAAY,GAAG,IAAIZ,IAAI,CAACc,SAAL,CAAeC,iBAAnB,CACbP,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID,OALD,MAKO;AACLJ,QAAAA,YAAY,GAAG,IAAIZ,IAAI,CAACc,SAAL,CAAeG,YAAnB,CACbT,QADa,EAEbG,OAAO,CAACK,mBAAR,IAA+B,KAFlB,CAAf;AAID;AACF,KAZD,MAYO;AACLJ,MAAAA,YAAY,GAAGJ,QAAf;AACD;;AAED,SAAKU,IAAL,GAAY,IAAIlB,IAAJ,CAASY,YAAT,CAAZ;;AAEA,QAAIF,OAAJ,EAAa;AACX,WAAKA,OAAL,GAAe,IAAIN,GAAJ,CAAQQ,YAAR,CAAf;AACA,WAAKO,QAAL,GAAgB,KAAKT,OAAL,CAAaS,QAAb,EAAhB;AACD;;AAED,QAAIR,OAAO,CAACS,cAAZ,EAA4B;AAC1B,WAAKF,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+BT,OAAO,CAACS,cAAvC;AACD;;AACD,SAAKE,SAAL,GAAiB,IAAIpB,SAAJ,CAAcU,YAAd,EAA4BH,SAA5B,EAAuC,KAAKS,IAA5C,EAAkDP,OAAlD,CAAjB;AACA,SAAKY,WAAL,GAAmBlB,iBAAiB,CAACmB,IAAlB,CAAuBf,SAAvB,CAAnB;AACA,SAAKgB,iBAAL,GAAyBpB,iBAAiB,CAACqB,UAAlB,CAA6BjB,SAA7B,CAAzB;AACA,SAAKkB,WAAL,GAAmBtB,iBAAiB,CAACuB,IAAlB,CAAuBnB,SAAvB,CAAnB;AACA,SAAKoB,cAAL,GAAsBxB,iBAAiB,CAACyB,OAAlB,CAA0BrB,SAA1B,CAAtB;AACD;;AAEa,QAARsB,QAAQ,GAAG;AACf,SAAKrB,OAAL,CAAaqB,QAAb,CAAsB,KAAKZ,QAA3B;AACD;;AAEDa,EAAAA,UAAU,CAACC,OAAD,EAAUC,MAAV,EAAkB;AAC1B,SAAKC,QAAL,CAAcC,IAAd,CAAmB,IAAIjC,OAAJ,CAAY,KAAKmB,SAAjB,EAA4BW,OAA5B,EAAqCC,MAArC,CAAnB;AACD;;AAEDG,EAAAA,WAAW,CAAC7B,QAAD,EAAWC,SAAX,EAAsB;AAC/B,SAAKS,IAAL,CAAUmB,WAAV,CAAsB7B,QAAtB;AACA,SAAKc,SAAL,CAAee,WAAf,CAA2B7B,QAA3B,EAAqCC,SAArC;AACA,SAAK6B,SAAL,CAAeC,YAAf,CAA4B9B,SAA5B;AACD;;AAED+B,EAAAA,iBAAiB,CAACC,OAAD,EAAU;AACzB,SAAKvB,IAAL,CAAUG,GAAV,CAAcD,cAAd,GAA+BqB,OAA/B;AACA,SAAKnB,SAAL,CAAekB,iBAAf,CAAiCC,OAAjC;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,WAAO,KAAKxB,IAAL,CAAUG,GAAV,CAAcD,cAArB;AACD;;AAEDuB,EAAAA,WAAW,CAACF,OAAD,EAAU;AACnB,UAAMG,UAAU,GAAG,KAAK1B,IAAL,CAAUG,GAAV,CAAcc,QAAd,CAAuBU,MAAvB,CAA8BC,GAA9B,CAAkCL,OAAO,CAACM,UAA1C,CAAnB;;AAEA,QACE,CAACH,UAAD,IACCH,OAAO,CAACR,OAAR,IACCQ,OAAO,CAACR,OAAR,CAAgBe,WAAhB,OAAkCJ,UAAU,CAACX,OAAX,CAAmBe,WAAnB,EAHtC,EAIE;AACA,YAAM,IAAIC,KAAJ,CAAW;AACvB,mBAAmBR,OAAO,CAACR,OAAQ,SAC3BW,UAAU,GAAGA,UAAU,CAACX,OAAd,GAAwB,IACnC,EAHK,CAAN;AAID;AACF;;AAEDiB,EAAAA,MAAM,CAACC,CAAD,EAAI;AACR,WAAOlD,SAAS,CAACkD,CAAD,CAAhB;AACD;;AA5Ee","sourcesContent":["import Web3 from 'web3'\r\nimport BigNumber from 'bignumber.js'\r\nimport {Contracts} from './lib/contracts.js'\r\nimport {Account} from './lib/accounts.js'\r\nimport {EVM} from './lib/evm.js'\r\n\r\nimport {contractAddresses} from './lib/constants'\r\n\r\nexport class Vbtc {\r\n  constructor(provider, networkId, testing, options) {\r\n    var realProvider\r\n    if (typeof provider === 'string') {\r\n      if (provider.includes('wss')) {\r\n        realProvider = new Web3.providers.WebsocketProvider(\r\n          provider,\r\n          options.ethereumNodeTimeout || 10000,\r\n        )\r\n      } else {\r\n        realProvider = new Web3.providers.HttpProvider(\r\n          provider,\r\n          options.ethereumNodeTimeout || 10000,\r\n        )\r\n      }\r\n    } else {\r\n      realProvider = provider\r\n    }\r\n\r\n    this.web3 = new Web3(realProvider)\r\n\r\n    if (testing) {\r\n      this.testing = new EVM(realProvider)\r\n      this.snapshot = this.testing.snapshot()\r\n    }\r\n\r\n    if (options.defaultAccount) {\r\n      this.web3.eth.defaultAccount = options.defaultAccount\r\n    }\r\n    this.contracts = new Contracts(realProvider, networkId, this.web3, options)\r\n    this.vbtcAddress = contractAddresses.vbtc[networkId]\r\n    this.masterChefAddress = contractAddresses.masterChef[networkId]\r\n    this.wethAddress = contractAddresses.weth[networkId]\r\n    this.strudelAddress = contractAddresses.strudel[networkId]\r\n  }\r\n\r\n  async resetEVM() {\r\n    this.testing.resetEVM(this.snapshot)\r\n  }\r\n\r\n  addAccount(address, number) {\r\n    this.accounts.push(new Account(this.contracts, address, number))\r\n  }\r\n\r\n  setProvider(provider, networkId) {\r\n    this.web3.setProvider(provider)\r\n    this.contracts.setProvider(provider, networkId)\r\n    this.operation.setNetworkId(networkId)\r\n  }\r\n\r\n  setDefaultAccount(account) {\r\n    this.web3.eth.defaultAccount = account\r\n    this.contracts.setDefaultAccount(account)\r\n  }\r\n\r\n  getDefaultAccount() {\r\n    return this.web3.eth.defaultAccount\r\n  }\r\n\r\n  loadAccount(account) {\r\n    const newAccount = this.web3.eth.accounts.wallet.add(account.privateKey)\r\n\r\n    if (\r\n      !newAccount ||\r\n      (account.address &&\r\n        account.address.toLowerCase() !== newAccount.address.toLowerCase())\r\n    ) {\r\n      throw new Error(`Loaded account address mismatch.\r\n        Expected ${account.address}, got ${\r\n        newAccount ? newAccount.address : null\r\n      }`)\r\n    }\r\n  }\r\n\r\n  toBigN(a) {\r\n    return BigNumber(a)\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}